{"version":3,"sources":["utils/configs.js","actions/fetchRecords.js","assets/logo.png","hooks/useScrollToBottom.js","components/ResultList.js","components/SearchForm.js","components/App.js","index.js"],"names":["configs","async","fetchRecords","value","nextPageToken","arguments","length","undefined","key","getConfig","axios","get","params","part","q","maxResults","type","pageToken","data","useScrollToBottom","ref","isAtBottom","setIsAtBottom","useState","useEffect","handleScroll","current","scrollTop","clientHeight","scrollHeight","container","addEventListener","removeEventListener","ResultList","props","listData","searchedFor","pageInfo","items","totalResults","_jsxs","_Fragment","children","className","_jsx","map","item","snippet","id","channelTitle","publishTime","thumbnails","videoId","href","src","default","url","width","height","alt","title","description","SearchForm","setValue","method","onSubmit","e","preventDefault","prevPageToken","setAutoCompleteList","name","placeholder","maxLength","required","onChange","currentTarget","onClick","App","autoCompleteList","shouldFetchData","setShouldFetchData","containerRef","useRef","_autoCompleteList$ite","setTimeout","fetchMoreRecords","logo","process","readAllConfigs","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"kOAAA,IAAIA,EAAU,CAAC,E,YCIRC,eAAeC,EAAaC,GAA8B,IAAvBC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACxD,MAAMG,EDHD,SAAmBA,GACxB,OAAOR,EAAQQ,IAAQ,IACzB,CCCcC,CAAU,UAatB,aAXuBC,IAAMC,IADjB,+CAC0B,CACpCC,OAAQ,CACNC,KAAM,UACNC,EAAGX,EACHY,WAAY,EACZC,KAAM,QACNR,IAAKA,EACLS,UAAWb,MAICc,IAClB,CCnBe,UAA0B,iCCyB1BC,MAvBYC,IACzB,MAAOC,EAAYC,GAAiBC,oBAAS,GAmB7C,OAjBAC,qBAAU,KACR,MAAMC,EAAeA,KACnB,IAAKL,EAAIM,QAAS,OAElB,MAAM,UAAEC,EAAS,aAAEC,EAAY,aAAEC,GAAiBT,EAAIM,QAEtDJ,EAAcO,GAAgBF,EAAYC,GAAgB,GAAG,EAGzDE,EAAYV,EAAIM,QAGtB,OAFAI,EAAUC,iBAAiB,SAAUN,GAE9B,KACLK,EAAUE,oBAAoB,SAAUP,EAAa,CACtD,GACA,CAACL,IAEGC,CAAU,E,eCpBJ,SAASY,EAAWC,GACjC,MAAM,SAAEC,EAAQ,YAAEC,GAAgBF,GAC5B,SAAEG,EAAQ,MAAEC,GAAUH,GACtB,aAAEI,GAAiBF,EA8BzB,OACEG,eAAAC,WAAA,CAAAC,SAAA,CACEF,eAAA,OAAKG,UAAU,iBAAgBD,SAAA,CAC7BF,eAAA,MAAAE,SAAA,CAAI,qBAAmBN,KACvBI,eAAA,QAAAE,SAAA,CAAM,UAEJE,cAAA,QAAM,cAAY,yBAAwBF,SAAEJ,EAAMhC,SAAc,KAChEsC,cAAA,QAAM,cAAY,uBAAsBF,SAAEH,UAlCzCD,EAAMO,KAAKC,IAChB,MAAM,QAAEC,EAAO,GAAEC,GAAOF,GAClB,aAAEG,EAAY,YAAEC,EAAW,WAAEC,GAAeJ,GAC5C,QAAEK,GAAYJ,EAEpB,OACEJ,cAAA,OAAKD,UAAU,OAAMD,SACnBF,eAAA,KAAGa,KAAM,mCAAmCD,IAAUV,SAAA,CACpDE,cAAA,OACEU,IAAKH,EAAWI,QAAQC,IACxBC,MAAON,EAAWM,MAClBC,OAAQP,EAAWO,OACnBC,IAAKb,EAAKC,QAAQa,QAEpBpB,eAAA,OAAAE,SAAA,CACEE,cAAA,UAAAF,SAASI,EAAKC,QAAQa,QACtBhB,cAAA,KAAAF,SAAII,EAAKC,QAAQc,iBAEnBrB,eAAA,UAAQG,UAAU,YAAWD,SAAA,CAC3BF,eAAA,QAAAE,SAAA,CAAM,aAAWO,EAAa,OAAQ,mBAAiBC,SAblCE,EAgBrB,MAkBd,CC5Ce,SAASU,EAAW5B,GACjC,MAAO/B,EAAO4D,GAAYxC,mBAAS,IASnC,OACEiB,eAAA,QAAMwB,OAAO,MAAMC,SARAhE,UACnBiE,EAAEC,iBACF,MAAM,SAAE9B,EAAQ,MAAEC,EAAK,cAAElC,EAAa,cAAEgE,SAAwBlE,EAAaC,GAC7E+B,EAAMmC,oBAAoB,CAAEhC,WAAUC,QAAOlC,gBAAegE,kBAC5DlC,EAAM6B,SAAS5D,EAAM,EAIsB,aAAW,iBAAgBuC,SAAA,CACpEE,cAAA,SACE0B,KAAK,eACLtD,KAAK,OACLuD,YAAY,iBACZC,UAAU,MACVC,UAAQ,EACRtE,MAAOA,EACPuE,SAAWR,GAAMH,EAASG,EAAES,cAAcxE,SAE5CyC,cAAA,SAAO5B,KAAK,SAASb,MAAM,SAASwC,UAAU,YAC9CC,cAAA,SACE5B,KAAK,QACLb,MAAM,QACNyE,QAASA,KACPb,EAAS,IACT7B,EAAMmC,oBAAoB,CAAC,EAAE,MAKvC,C,MCkBeQ,MA5Cf,WACE,MAAOC,EAAkBT,GAAuB9C,mBAAS,CAAC,IACnDpB,EAAO4D,GAAYxC,mBAAS,KAC5BwD,EAAiBC,GAAsBzD,oBAAS,GACjD0D,EAAeC,iBAAO,MACtB7D,EAAaF,EAAkB8D,GA0BrC,OAxBAzD,qBAAU,KACiBvB,WAAa,IAADkF,EACnC,GAA0B,QAAtBA,EAAAL,EAAiBxC,aAAK,IAAA6C,GAAtBA,EAAwB7E,QAAUe,GAAc0D,EAAiB,CACnEC,GAAmB,GACnB,MAAM,SAAE3C,EAAQ,MAAEC,EAAK,cAAElC,EAAa,cAAEgE,SAAwBlE,EAC9DC,EACA2E,EAAiB1E,eAEnBiE,EAAoB,IACfS,EACHzC,WACAC,MAAO,IAAIwC,EAAiBxC,SAAUA,GACtClC,gBACAgE,kBAEFgB,YAAW,KACTJ,GAAmB,EAAK,GACvB,GACL,GAGFK,EAAkB,GACjB,CAACP,EAAkBzD,EAAY0D,EAAiB5E,IAGjDqC,eAAA,WAASG,UAAU,YAAWD,SAAA,CAC5BF,eAAA,WAASG,UAAU,iBAAgBD,SAAA,CACjCE,cAAA,OAAKU,IAAKgC,EAAM3B,IAAI,SACpBf,cAACkB,EAAU,CAACO,oBAAqBA,EAAqBN,SAAUA,OAElEnB,cAAA,WAASD,UAAU,iBAAiBvB,IAAK6D,EAAc,cAAY,aAAYvC,SAC5EoC,EAAiBxC,OAASM,cAACX,EAAU,CAACE,SAAU2C,EAAkB1C,YAAajC,QAIxF,E,ON1CO,WAJA,IAAwBA,IAKboF,0CAJhBvF,EAKU,UALKG,CAMjB,COJAqF,GAEAC,IAASC,OACP9C,cAAC+C,IAAMC,WAAU,CAAAlD,SACfE,cAACiC,EAAG,MAENgB,SAASC,eAAe,Q","file":"static/js/main.576d999c.chunk.js","sourcesContent":["let configs = {};\n\nexport function getConfig(key) {\n  return configs[key] || null;\n}\n\nexport function setConfig(key, value) {\n  configs[key] = value;\n}\n\nexport function readAllConfigs() {\n  const API_KEY = process.env.REACT_APP_API_KEY || null;\n  setConfig('apiKey', API_KEY);\n}\n","import axios from 'axios';\n\nimport { getConfig } from '../utils/configs';\n\nexport async function fetchRecords(value, nextPageToken = null) {\n  const key = getConfig('apiKey');\n  const url = 'https://www.googleapis.com/youtube/v3/search';\n  const response = await axios.get(url, {\n    params: {\n      part: 'snippet',\n      q: value,\n      maxResults: 5,\n      type: 'video',\n      key: key,\n      pageToken: nextPageToken,\n    },\n  });\n\n  return response.data;\n}\n","export default __webpack_public_path__ + \"static/media/logo.b552ea1e.png\";","import { useEffect, useState } from 'react';\n\nconst useScrollToBottom = (ref) => {\n  const [isAtBottom, setIsAtBottom] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!ref.current) return;\n\n      const { scrollTop, clientHeight, scrollHeight } = ref.current;\n      // Check if the user has scrolled to the bottom\n      setIsAtBottom(scrollHeight - (scrollTop + clientHeight) < 15);\n    };\n\n    const container = ref.current;\n    container.addEventListener('scroll', handleScroll);\n\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n    };\n  }, [ref]);\n\n  return isAtBottom;\n};\n\nexport default useScrollToBottom;\n","import '../styles/resultList.scss';\n\nexport default function ResultList(props) {\n  const { listData, searchedFor } = props;\n  const { pageInfo, items } = listData;\n  const { totalResults } = pageInfo;\n\n  const showList = () => {\n    return items.map((item) => {\n      const { snippet, id } = item;\n      const { channelTitle, publishTime, thumbnails } = snippet;\n      const { videoId } = id;\n\n      return (\n        <div className=\"list\" key={videoId}>\n          <a href={`https://www.youtube.com/watch?v=${videoId}`}>\n            <img\n              src={thumbnails.default.url}\n              width={thumbnails.width}\n              height={thumbnails.height}\n              alt={item.snippet.title}\n            />\n            <div>\n              <strong>{item.snippet.title}</strong>\n              <p>{item.snippet.description}</p>\n            </div>\n            <strong className=\"more-info\">\n              <span>Channel : {channelTitle}.</span> Published on : {publishTime}\n            </strong>\n          </a>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div className=\"results-header\">\n        <h1>Result List for : {searchedFor}</h1>\n        <span>\n          Showing\n          <span data-testid=\"showing-records-length\">{items.length}</span> /\n          <span data-testid=\"total-records-length\">{totalResults}</span>\n        </span>\n      </div>\n      {showList()}\n    </>\n  );\n}\n","import { useState } from 'react';\n\nimport { fetchRecords } from '../actions/fetchRecords';\n\nexport default function SearchForm(props) {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { pageInfo, items, nextPageToken, prevPageToken } = await fetchRecords(value);\n    props.setAutoCompleteList({ pageInfo, items, nextPageToken, prevPageToken });\n    props.setValue(value);\n  };\n\n  return (\n    <form method=\"get\" onSubmit={handleSubmit} aria-label=\"search-youtube\">\n      <input\n        name=\"search_query\"\n        type=\"text\"\n        placeholder=\"Search YouTube\"\n        maxLength=\"128\"\n        required\n        value={value}\n        onChange={(e) => setValue(e.currentTarget.value)}\n      />\n      <input type=\"submit\" value=\"Search\" className=\"primary\" />\n      <input\n        type=\"reset\"\n        value=\"Clear\"\n        onClick={() => {\n          setValue('');\n          props.setAutoCompleteList({});\n        }}\n      />\n    </form>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\n\nimport { fetchRecords } from '../actions/fetchRecords';\nimport logo from '../assets/logo.png';\nimport useScrollToBottom from '../hooks/useScrollToBottom';\nimport ResultList from './ResultList';\nimport SearchForm from './SearchForm';\n\nimport '../styles/app.scss';\n\nfunction App() {\n  const [autoCompleteList, setAutoCompleteList] = useState({});\n  const [value, setValue] = useState('');\n  const [shouldFetchData, setShouldFetchData] = useState(true);\n  const containerRef = useRef(null);\n  const isAtBottom = useScrollToBottom(containerRef);\n\n  useEffect(() => {\n    const fetchMoreRecords = async () => {\n      if (autoCompleteList.items?.length && isAtBottom && shouldFetchData) {\n        setShouldFetchData(false);\n        const { pageInfo, items, nextPageToken, prevPageToken } = await fetchRecords(\n          value,\n          autoCompleteList.nextPageToken,\n        );\n        setAutoCompleteList({\n          ...autoCompleteList,\n          pageInfo,\n          items: [...autoCompleteList.items, ...items],\n          nextPageToken,\n          prevPageToken,\n        });\n        setTimeout(() => {\n          setShouldFetchData(true);\n        }, 10);\n      }\n    };\n\n    fetchMoreRecords();\n  }, [autoCompleteList, isAtBottom, shouldFetchData, value]);\n\n  return (\n    <article className=\"container\">\n      <section className=\"form-container\">\n        <img src={logo} alt=\"logo\" />\n        <SearchForm setAutoCompleteList={setAutoCompleteList} setValue={setValue} />\n      </section>\n      <section className=\"list-container\" ref={containerRef} data-testid=\"resultList\">\n        {autoCompleteList.items && <ResultList listData={autoCompleteList} searchedFor={value} />}\n      </section>\n    </article>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { readAllConfigs } from './utils/configs';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nimport './styles/index.scss';\n\nreadAllConfigs();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}